name: Auto Release

on:
  push:
    branches: [ main ]
    paths: 
      - 'package.json'

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version from the previous commit
          git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous version found"
          PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Restore current package.json
          git checkout HEAD -- package.json
          
          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version not changed"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run vscode:prepublish

      - name: Package extension
        run: |
          npm install -g @vscode/vsce
          vsce package

      - name: Create and push tag
        run: |
          VERSION=${{ needs.check-version.outputs.new-version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Get VSIX filename
        id: get-vsix
        run: |
          VSIX_FILE=$(ls *.vsix | head -n 1)
          echo "vsix-file=$VSIX_FILE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          name: Release v${{ needs.check-version.outputs.new-version }}
          generate_release_notes: true
          files: ${{ steps.get-vsix.outputs.vsix-file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}